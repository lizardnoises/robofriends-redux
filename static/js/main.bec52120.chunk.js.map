{"version":3,"sources":["reportWebVitals.js","common/Card.js","common/CardList.js","common/SearchBox.js","common/Scroll.js","common/ErrorBoundary.js","app/robotsSlice.js","app/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","email","className","src","alt","CardList","robots","map","robot","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","initialStateSearch","searchField","initialStateRequest","isPending","selectSearch","searchReducer","selectRobots","requestRobotsReducer","App","useSelector","dispatch","useDispatch","useEffect","fetch","response","json","users","payload","fulfillRobots","catch","err","rejectRobots","filteredRobots","filter","toLowerCase","includes","event","target","value","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bec52120.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\n\r\nfunction Card({ id, name, email }) {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({ robots }) {\r\n  return (\r\n    <div>\r\n      {robots.map((robot) => {\r\n        return (\r\n          <Card\r\n            key={robot.id}\r\n            id={robot.id}\r\n            name={robot.name}\r\n            email={robot.email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nfunction SearchBox({ searchChange }) {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nfunction Scroll(props) {\r\n  return (\r\n    <div\r\n      style={{ overflow: 'scroll', border: '5px solid black', height: '800px' }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    return this.state.hasError ? (\r\n      <h1>Ooops. That is not good</h1>\r\n    ) : (\r\n      this.props.children\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","// Keeping form field data in the Redux store is generally bad practice. This\r\n// is just for learning purposes.\r\n\r\n// action creators\r\n\r\nexport const changeSearch = (text) => ({\r\n  type: 'robots/searchChanged',\r\n  payload: text,\r\n});\r\n\r\nconst pendRobots = () => ({\r\n  type: 'robots/pending',\r\n});\r\n\r\nconst fulfillRobots = (users) => ({\r\n  type: 'robots/fulfilled',\r\n  payload: users,\r\n});\r\n\r\nconst rejectRobots = (err) => ({\r\n  type: 'robots/rejected',\r\n  payload: err,\r\n});\r\n\r\n// async action creators (for use with Redux Thunk)\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch(pendRobots());\r\n  return fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((response) => response.json())\r\n    .then((users) => dispatch(fulfillRobots(users)))\r\n    .catch((err) => dispatch(rejectRobots(err)));\r\n};\r\n\r\n// reducers\r\n\r\nconst initialStateSearch = { searchField: '' };\r\n\r\nexport const searchReducer = (state = initialStateSearch, action) => {\r\n  if (action.type === 'robots/searchChanged') {\r\n    return { ...state, searchField: action.payload };\r\n  }\r\n  return state;\r\n};\r\n\r\nconst initialStateRequest = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: '',\r\n};\r\n\r\nexport const requestRobotsReducer = (state = initialStateRequest, action) => {\r\n  switch (action.type) {\r\n    case 'robots/pending':\r\n      return { ...state, isPending: true };\r\n    case 'robots/fulfilled':\r\n      return { ...state, isPending: false, robots: action.payload };\r\n    case 'robots/rejected':\r\n      return { ...state, isPending: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// selectors\r\n\r\nexport const selectSearch = (state) => state.searchReducer.searchField;\r\n\r\nexport const selectRobots = (state) => ({\r\n  robots: state.requestRobotsReducer.robots,\r\n  isPending: state.requestRobotsReducer.isPending,\r\n  error: state.requestRobotsReducer.error,\r\n});\r\n","import React, { useEffect } from 'react';\r\nimport CardList from '../common/CardList';\r\nimport SearchBox from '../common/SearchBox';\r\nimport Scroll from '../common/Scroll';\r\nimport ErrorBoundary from '../common/ErrorBoundary';\r\nimport './App.css';\r\nimport {\r\n  changeSearch,\r\n  requestRobots,\r\n  selectSearch,\r\n  selectRobots,\r\n} from './robotsSlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nfunction App() {\r\n  const { robots, isPending } = useSelector(selectRobots);\r\n  const searchField = useSelector(selectSearch);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => dispatch(requestRobots()), [dispatch]);\r\n\r\n  const filteredRobots = robots.filter((robot) =>\r\n    robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n  );\r\n\r\n  return isPending ? (\r\n    <h1 className=\"tc\">Loading</h1>\r\n  ) : (\r\n    <div className=\"tc\">\r\n      <h1 className=\"f1\">RoboFriends</h1>\r\n      <SearchBox\r\n        searchChange={(event) => dispatch(changeSearch(event.target.value))}\r\n      />\r\n      <Scroll>\r\n        <ErrorBoundary>\r\n          <CardList robots={filteredRobots} />\r\n        </ErrorBoundary>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\nimport App from './app/App';\r\nimport { searchReducer, requestRobotsReducer } from './app/robotsSlice';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchReducer, requestRobotsReducer });\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, logger)\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}